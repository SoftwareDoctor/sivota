/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.softwaredoctor.sivota.api;

import it.softwaredoctor.sivota.dto.RispostaDTO;
import it.softwaredoctor.sivota.dto.VotazioneDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-19T10:22:51.442175600+02:00[Europe/Rome]")
@Validated
@Tag(name = "votazione", description = "the votazione API")
public interface VotazioneApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /votazione : Creare una nuova votazione
     *
     * @param votazioneDTO  (required)
     * @return Votazione creata con successo (status code 200)
     *         or Richiesta non valida (status code 400)
     */
    @Operation(
        operationId = "createVotazione",
        summary = "Creare una nuova votazione",
        tags = { "votazione" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Votazione creata con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/votazione",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createVotazione(
        @Parameter(name = "VotazioneDTO", description = "", required = true) @Valid @RequestBody VotazioneDTO votazioneDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /votazione/{uuidVotazione} : Eliminare una votazione
     *
     * @param uuidVotazione  (required)
     * @return Votazione eliminata con successo (status code 204)
     *         or Richiesta non valida (status code 400)
     */
    @Operation(
        operationId = "deleteVotazione",
        summary = "Eliminare una votazione",
        tags = { "votazione" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Votazione eliminata con successo"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/votazione/{uuidVotazione}"
    )
    
    default ResponseEntity<Void> deleteVotazione(
        @Parameter(name = "uuidVotazione", description = "", required = true, in = ParameterIn.PATH) @PathVariable("uuidVotazione") String uuidVotazione
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /votazione/{uuidVotazione} : Visualizzare una votazione con i risultati (solo per il creatore)
     *
     * @param uuidVotazione  (required)
     * @return Dettagli votazione trovati (status code 200)
     *         or Accesso negato (status code 403)
     *         or Richiesta non valida (status code 400)
     */
    @Operation(
        operationId = "getVotazioneByUuid",
        summary = "Visualizzare una votazione con i risultati (solo per il creatore)",
        tags = { "votazione" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Dettagli votazione trovati", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VotazioneDTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "Accesso negato"),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/votazione/{uuidVotazione}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<VotazioneDTO> getVotazioneByUuid(
        @Parameter(name = "uuidVotazione", description = "", required = true, in = ParameterIn.PATH) @PathVariable("uuidVotazione") String uuidVotazione
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isAnonymous\" : false, \"titolo\" : \"consiglio_direttivo\", \"dataCreazione\" : \"dataCreazione\", \"domande\" : [ { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" }, { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" } ], \"uuidVotazione\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"user\" : { \"registrato\" : false, \"password\" : \"andrea87\", \"surname\" : \"italiano\", \"name\" : \"andrea\", \"uuidUser\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"email\" : \"andrea87@yahoo.it\", \"votazione\" : [ null, null ], \"username\" : \"andrea87\" }, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /votazione/user/{uuidUser} : Recuperare tutte le votazioni di un utente
     *
     * @param uuidUser  (required)
     * @return Elenco votazioni trovato (status code 200)
     *         or Richiesta non valida (status code 400)
     */
    @Operation(
        operationId = "getVotazioniByUuidUser",
        summary = "Recuperare tutte le votazioni di un utente",
        tags = { "votazione" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Elenco votazioni trovato", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VotazioneDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/votazione/user/{uuidUser}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<VotazioneDTO>> getVotazioniByUuidUser(
        @Parameter(name = "uuidUser", description = "", required = true, in = ParameterIn.PATH) @PathVariable("uuidUser") String uuidUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"isAnonymous\" : false, \"titolo\" : \"consiglio_direttivo\", \"dataCreazione\" : \"dataCreazione\", \"domande\" : [ { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" }, { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" } ], \"uuidVotazione\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"user\" : { \"registrato\" : false, \"password\" : \"andrea87\", \"surname\" : \"italiano\", \"name\" : \"andrea\", \"uuidUser\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"email\" : \"andrea87@yahoo.it\", \"votazione\" : [ null, null ], \"username\" : \"andrea87\" }, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ] }, { \"isAnonymous\" : false, \"titolo\" : \"consiglio_direttivo\", \"dataCreazione\" : \"dataCreazione\", \"domande\" : [ { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" }, { \"totaleRisposte\" : 0, \"risposte\" : [ { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }, { \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" } ], \"uuidDomanda\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"testo\" : \"Qual è la tua opinione?\" } ], \"uuidVotazione\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"user\" : { \"registrato\" : false, \"password\" : \"andrea87\", \"surname\" : \"italiano\", \"name\" : \"andrea\", \"uuidUser\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"email\" : \"andrea87@yahoo.it\", \"votazione\" : [ null, null ], \"username\" : \"andrea87\" }, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /votazione/votante/{uuidVotazione} : Rispondere a una votazione tramite invito
     *
     * @param uuidVotazione  (required)
     * @param rispostaDTO  (required)
     * @return Risposta creata con successo (status code 200)
     *         or Richiesta non valida (status code 400)
     */
    @Operation(
        operationId = "respondToVotazione",
        summary = "Rispondere a una votazione tramite invito",
        tags = { "votazione" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Risposta creata con successo", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RispostaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Richiesta non valida")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/votazione/votante/{uuidVotazione}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<RispostaDTO> respondToVotazione(
        @Parameter(name = "uuidVotazione", description = "", required = true, in = ParameterIn.PATH) @PathVariable("uuidVotazione") String uuidVotazione,
        @Parameter(name = "RispostaDTO", description = "", required = true) @Valid @RequestBody RispostaDTO rispostaDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dataRisposta\" : \"dataRisposta\", \"isSelected\" : false, \"uuidRisposta\" : \"6e3a4567-912a-4b1f-8d5b-5fb317d1f5ac\", \"risultatoNumerico\" : 0, \"votantiEmail\" : [ \"andrea87@gmail.com\", \"andrea87@gmail.com\" ], \"testo\" : \"ok\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
